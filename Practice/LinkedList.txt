---------------------------------------------------------------------------
0. Node Class Declaration
---------------------------------------------------------------------------
class Node
{
public:
    int data;
    Node *next;
    Node(int data, Node *next)
    {
        this->data = data;
        this->next = next;
    }
    Node(int data)
    {
        this->data = data;
        this->next = nullptr;
    }
};
---------------------------------------------------------------------------
1. Array to Linked List
---------------------------------------------------------------------------
Node *arrayToLinkedList(int arr[], int size)
{
    if (size == 0)
    {
        return nullptr;
    }
    Node *head = new Node(arr[0]);
    Node *temp = head;
    for (int i = 1; i < size; i++)
    {
        Node *node = new Node(arr[i]);
        temp->next = node;
        temp = temp->next;
    }
    return head;
}
---------------------------------------------------------------------------
2. Print Linked List
---------------------------------------------------------------------------
void printLinkedList(Node *head)
{
    Node *temp = head;
    while (temp->next != nullptr)
    {
        cout << temp->data << "->";
        temp = temp->next;
    }
    cout << endl;
}
---------------------------------------------------------------------------
3. Size of Linked List
---------------------------------------------------------------------------
int sizeLinkedList(Node *head)
{
    Node *temp = head;
    int size = 0;
    while (temp->next != nullptr)
    {
        size++;
        temp = temp->next;
    }
    return size;
}
---------------------------------------------------------------------------
4. Check if Element is present in Linked List or Not
---------------------------------------------------------------------------
bool isPresent(Node *head, int target)
{
    Node *temp = head;
    while (temp->next != nullptr)
    {
        if (temp->data == target)
        {
            return true;
        }
        temp = temp->next;
    }
    return false;
}
---------------------------------------------------------------------------
5. 
---------------------------------------------------------------------------